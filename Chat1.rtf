{\rtf1\ansi\ansicpg1252\cocoartf1404\cocoasubrtf470
{\fonttbl\f0\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;}
\margl1440\margr1440\vieww19380\viewh11920\viewkind0
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f0\fs24 \cf0 //package chat;\
\
import java.net.*;\
import java.io.*;\
import java.util.*;\
import java.util.logging.Level;\
import java.util.logging.Logger;\
/*****************************//**\
* \\brief It implements a distributed chat. \
* It creates a ring and delivers messages\
* using flooding \
**********************************/\
public class Chat implements Serializable \{\
  public enum enum_MSG \{\
      JOIN,\
      LEAVE,\
      PUT;\
   \};\
  \
  public class Peer implements Serializable \{ \
      String id, ip;\
      int port;\
      public Peer() \{\
      \}\
      public Peer(String id, String ip, int port) \{\
          this.id = id;\
          this.ip = ip;\
          this.port = port;\
      \}\
      public Peer(String id, int port) \{\
          this.id = id;\
          this.port = port;\
      \}\
  \}\
  \
 public class MainMessage implements Serializable  \{\
    enum_MSG messageID;\
    String id, id_pred, id_suc, idSender, idDest;\
    String ip, ip_pred,ip_suc;\
    String text;\
    int port, port_pred, port_suc;\
    \
    public MainMessage() \{\
    \}\
    \
    public MainMessage(enum_MSG m) \{\
        this.messageID = m;\
    \}\
    \
  \}\
 \
/*****************************//**\
* \\class Server class "chat.java" \
* \\brief It implements the server\
**********************************/ \
  public class Server implements Runnable\
  \{\
    String id, ip;\
    int port;\
    public Server(String id, int port)\
    \{\
       this.port = port;\
       this.id = id;\
    \}\
/*****************************//**\
* \\brief It allows the system to interact with the participants. \
**********************************/   \
    //server run override\
    public void run() \{\
        try \{\
            ServerSocket servSock = new ServerSocket(port);\
            while (true)\
            \{\
                Socket clntSock = servSock.accept(); // Get client connections\
                ObjectInputStream  ois = new\
                  ObjectInputStream(clntSock.getInputStream());\
                ObjectOutputStream oos = new\
                  ObjectOutputStream(clntSock.getOutputStream());\
                try \{\
                    MainMessage m = (MainMessage)ois.readObject();\
                    //get ip from client socket and set to message\
                    m.ip = clntSock.getInetAddress().getHostAddress();\
                    // Handle Messages\
                    switch(m.messageID) \{\
                        case JOIN:\
                            System.out.println("Recieving msg id: " + m.id);\
                            System.out.println("Recieving msg port: " + m.port);\
                            Peer p = new Peer(m.id, m.port);\
                            \
                            break;\
                        case PUT:\
                        default:\
                            break;\
                    \}\
                    \
                    \
                    \
                    \
                \} catch (ClassNotFoundException ex) \{\
                    Logger.getLogger\
                        (Chat.class.getName()).log(Level.SEVERE, null, ex);\
                \}\
                \
                clntSock.close();\
            \} \
        \} catch (IOException ex) \{\
            Logger.getLogger(Chat.class.getName()).log(Level.SEVERE, null, ex);\
        \}\
    \}\
  \}\
  \
//class Client class "chat.java" \
/*****************************//*\
* \\brief It implements the client\
**********************************/\
  public class Client implements Runnable\
  \{       \
    String id, ip;\
    int port;\
    String ipConnect;\
    int portConnect;\
    MainMessage m = new MainMessage(); \
    //PUT command variables\
    String idSender, idDest, text;\
    \
    public Client(String id, int p)\
    \{\
       this.port = p;\
       this.id = id;\
    \}\
\
  /*****************************//**\
* \\brief It allows the user to interact with the system. \
**********************************/    \
    //client run override\
    public void run()\
    \{\
      while (true)\
      \{\
          try \{\
              //Get the message information from the User\
              Scanner in = new Scanner(System.in);\
              System.out.println("Input command: JOIN, PUT, LEAVE");\
              String cmd = in.nextLine();\
              \
              if(cmd.equalsIgnoreCase("JOIN")) \{\
                  System.out.println("Enter the IP");\
                  ipConnect = in.nextLine();\
                  System.out.println("Enter the port");\
                  portConnect = in.nextInt();\
                  MainMessage mm = new MainMessage(enum_MSG.JOIN);\
                  mm.id = this.id;\
                  mm.port = this.port;\
                  \
              Socket socket = new Socket(ipConnect, portConnect);\
              ObjectOutputStream oos = new\
                  ObjectOutputStream(socket.getOutputStream());\
              ObjectInputStream ois = new\
                  ObjectInputStream(socket.getInputStream());\
              oos.writeObject(mm);\
              //ois.read();\
              socket.close();\
              \}\
              \
              if(cmd.equalsIgnoreCase("PUT")) \{\
                  System.out.println("Enter the Dest");\
                  idDest = in.nextLine();\
                  System.out.println("Enter the text");\
                  text = in.nextLine();\
                  MainMessage mm = new MainMessage(enum_MSG.PUT);\
                  mm.idSender = idSender;\
                  mm.idDest = idDest;\
                  mm.text = text;\
              \}\
              \
              if(cmd.equalsIgnoreCase("LEAVE")) \{\
                  System.out.println("Enter the ID");\
                  id = in.nextLine();\
                  MainMessage mm = new MainMessage(enum_MSG.LEAVE);\
                  mm.id = id;\
             \}\
//              Socket socket = new Socket(ip, port);\
//              ObjectOutputStream oos = new\
//                  ObjectOutputStream(socket.getOutputStream());\
//              ObjectInputStream ois = new\
//                  ObjectInputStream(socket.getInputStream());\
//              oos.writeObject(m);\
//              ois.read();\
//              socket.close();\
          \} catch (IOException ex) \{\
              Logger.getLogger\
                    (Chat.class.getName()).log(Level.SEVERE, null, ex);\
          \}\
      \}\
    \}\
  \}\
  \
/*****************************//**\
* Starts the threads with the client and server:\
* \\param Id unique identifier of the process\
* \\param port where the server will listen\
**********************************/  \
  public Chat(String Id, int port) \{\
     \
      // Initialization of the peer\
      //! add server parameter Id\
      Thread server = new Thread(new Server(Id, port));\
      Thread client = new Thread(new Client(Id, port));\
      server.start();\
      client.start();\
      try \{\
          client.join();\
          server.join();\
      \} catch (InterruptedException interruptedException) \{\
      \}\
  \}\
  \
  public static void main(String[] args) \{\
      if (args.length < 2 ) \{  \
          throw new IllegalArgumentException("Parameter: <id> <port>");\
      \}\
      Chat chat = new Chat(args[0], Integer.parseInt(args[1]));\
      \
  \}\
\}\
}